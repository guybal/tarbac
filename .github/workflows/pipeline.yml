name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/helm-oci

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
  
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    env:
      DOCKER_IMAGE: ghcr.io/guybal/tarbac/controller
      HELM_IMAGE: ghcr.io/guybal/tarbac/helm
      VERSION_FILE: VERSION
      HELM_CHART_SUBPATH: config/helm
      branch: feature/helm-oci

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Read Current Version
        id: read-version
        run: |
          if [ -f "$VERSION_FILE" ]; then
            echo "current_version=$(cat $VERSION_FILE)" >> $GITHUB_ENV
          else
            echo "current_version=v1.0.0" >> $GITHUB_ENV
          fi

      - name: Bump Patch Version
        id: bump-version
        run: |
          current_version="${{ env.current_version }}"
          if [[ "$current_version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            new_version="v${major}.${minor}.$((patch + 1))"
            echo "new_version=$new_version" >> $GITHUB_ENV
          else
            echo "Error: Invalid version format $current_version" >&2
            exit 1
          fi

      - name: Generate Code
        run: |
          go mod tidy
          export PATH=$PATH:$(go env GOPATH)/bin # Add GOPATH/bin to PATH
          go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.16.5
          controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./api/v1"

      - name: Build Docker Image
        run: |
          docker build -t "${DOCKER_IMAGE}:${{ env.new_version }}" .

      - name: Install Cosign
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/download/v1.4.1/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      - name: Sign Docker Image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign --key cosign.key $DOCKER_IMAGE:${{ env.new_version }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          docker push "${DOCKER_IMAGE}:${{ env.new_version }}"

      - name: Update Version
        run: |
          echo "${{ env.new_version }}" > $VERSION_FILE

      - name: Update Helm Chart
        run: |
          # Update Chart.yaml
          current_chart_version=$(grep '^version:' $HELM_CHART_SUBPATH/Chart.yaml | awk '{print $2}')
          new_chart_version=$(echo ${current_chart_version} | awk -F. '{print $1"."$2"."$3+1}')
          sed -i "s/^version: .*/version: ${new_chart_version}/" $HELM_CHART_SUBPATH/Chart.yaml
          echo "new_chart_version=$new_chart_version" >> $GITHUB_ENV

          # Update CRDs
          cp -r config/crd/bases/* config/helm/templates/crd/
          
          # Update values.yaml
          sed -i "s|^  tag: .*|  tag: ${new_version}|g" $HELM_CHART_SUBPATH/values.yaml
                    
      - name: Package Helm Chart
        run: |
          mkdir -p temp-helm-oci
          helm package ${HELM_CHART_SUBPATH} --app-version ${{ env.new_version }} --destination ./temp-helm-oci

      - name: Log in to GitHub Container Registry for Helm
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Helm Chart as OCI Image
        id: push-helm-chart
        run: |
          CHART_PACKAGE=$(ls ./temp-helm-oci/*.tgz)
          helm push ${CHART_PACKAGE} oci://${{ env.HELM_IMAGE }}
          echo "CHART_DIGEST=$(helm show chart ${CHART_PACKAGE} | grep digest | awk '{print $2}')" >> $GITHUB_ENV

      - name: Sign Helm Chart
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --key cosign.key oci://${{ env.HELM_IMAGE }}:${{ env.new_version }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          body: |
            Docker Image Digest: ${{ steps.push-helm-chart.outputs.digest }}
            Helm Chart Digest: ${{ env.CHART_DIGEST }}
            Cosign Public Key:
            ```
            ${{ secrets.COSIGN_PUBLIC_KEY }}
            ```
          draft: false
          prerelease: false
        
      - name: Commit Version Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $VERSION_FILE $HELM_CHART_SUBPATH/Chart.yaml $HELM_CHART_SUBPATH/values.yaml
          git add config/helm/templates/crd
          git commit -m "Update to version ${{ env.new_version }}"
          git tag -a ${{ env.new_version }} -m "${{ env.new_version }}"
          git push --follow-tags origin ${{ env.branch }}