name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/helm-oci

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
  
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      DOCKER_IMAGE: ghcr.io/guybalmas/temporary-rbac-controller
      HELM_IMAGE: ghcr.io/guybalmas
      VERSION_FILE: VERSION
      HELM_CHART_SUBPATH: config/helm

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # - name: Set up Docker
      #   uses: docker/setup-buildx-action@v2
      
      # - name: Update Version
      #   id: bump-version
      #   run: |
      #     if [ -f "$VERSION_FILE" ]; then
      #       echo "current_version=$(cat $VERSION_FILE)" >> $GITHUB_ENV
      #     else
      #       echo "current_version=v1.0.0" >> $GITHUB_ENV
      #     fi

      #     current_version="${{ env.current_version }}"

      #     if [[ "$current_version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
      #       major="${BASH_REMATCH[1]}"
      #       minor="${BASH_REMATCH[2]}"
      #       patch="${BASH_REMATCH[3]}"
      #       new_version="v${major}.${minor}.$((patch + 1))"
      #       echo "new_version=$new_version" >> $GITHUB_ENV
      #     else
      #       echo "Error: Invalid version format $current_version" >&2
      #       exit 1
      #     fi

      #     echo "${{ env.new_version }}" > $VERSION_FILE

      # - name: Generate Code
      #   run: |
      #     go mod tidy
      #     export PATH=$PATH:$(go env GOPATH)/bin # Add GOPATH/bin to PATH
      #     go install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.16.5
      #     controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./api/v1"
      
      # - name: Log in to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Build and Push Docker Image
      #   run: |
      #     docker build -t "${DOCKER_IMAGE}:${{ env.new_version }}" .
      #     docker push "${DOCKER_IMAGE}:${{ env.new_version }}"

      # - name: Update Helm Chart
      #   run: |
      #     cp -r config/crd/bases/* config/helm/templates/crd/
          
      #     # Update values.yaml
      #     sed -i "s|^  tag: .*|  tag: ${new_version}|g" $HELM_CHART_SUBPATH/values.yaml
          
      #     # Update Chart.yaml
      #     sed -i "s|^appVersion: \".*\"|appVersion: \"${new_version}\"|g" $HELM_CHART_SUBPATH/Chart.yaml   
          
      # - name: Package Helm Chart
      #   run: |
      #     helm package ${HELM_CHART_SUBPATH} --destination ./
  
      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GHCR_PAT }}

      - name: Push Helm Chart as OCI Image
        run: |
          mkdir -p temp-helm-oci
          helm package ${HELM_CHART_SUBPATH} --destination ./temp-helm-oci
          CHART_PACKAGE=$(ls ./temp-helm-oci/*.tgz)
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          helm push ${CHART_PACKAGE} oci://${HELM_IMAGE} 

      # - name: Commit Version Changes
      #   env:
      #     GH_TOKEN: ${{ secrets.GHCR_PAT }}
      #   run: |
      #     git config user.name "GitHub Actions"
      #     git config user.email "actions@github.com"
      #     git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/guybal/tarbac.git
      #     git add $VERSION_FILE $HELM_CHART_SUBPATH/Chart.yaml $HELM_CHART_SUBPATH/values.yaml
      #     git add config/helm/templates/crd
      #     git commit -m "Update to version ${{ env.new_version }}"
      #     git tag -a ${{ env.new_version }} -m "${{ env.new_version }}" 
      #     git push --follow-tags origin main